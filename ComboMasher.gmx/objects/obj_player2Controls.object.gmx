<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>onButton = 0;
goodToPress = true;
selected = 0;
done = false;
finished = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>goodToPress = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>gamepad_set_vibration(1,0,0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(!done &amp;&amp; obj_player1Controls.done)
{
    finished = 2;
}

if(done &amp;&amp; obj_player1Controls.done == false)
{
    finished = 1;
}
if(!done &amp;&amp; obj_player1Controls.done == false)
{
    finished = 0;
}
if(gamepad_is_connected(1))
{
    /*
        //Move Left
        if(gamepad_axis_value(0, gp_axislh) &gt; .2)
        {
            obj_fighter1.hspeed = gamepad_axis_value(0,gp_axislh) * 5;
        }
        //Move Right
        if(gamepad_axis_value(0, gp_axislh) &lt; -.2)
        {
            obj_fighter1.hspeed = gamepad_axis_value(0,gp_axislh) * 5;
        }
        //Put speeed to 0 when joystick released
        if(gamepad_axis_value(0, gp_axislh) &lt; .2 &amp;&amp; gamepad_axis_value(0, gp_axislh) &gt; -.2)
        {
            obj_fighter1.hspeed = 0;
        }
        //Move Up
        if(gamepad_axis_value(0, gp_axislv) &gt; .2)
        {
            obj_fighter1.vspeed = gamepad_axis_value(0,gp_axislv) * 5;
        }
        //Move Down
        if(gamepad_axis_value(0, gp_axislv) &lt; -.2)
        {
            obj_fighter1.vspeed = gamepad_axis_value(0,gp_axislv) * 5;
        }
        //Put speed to 0 when joystick released
        if(gamepad_axis_value(0, gp_axislv) &lt; .2 &amp;&amp; gamepad_axis_value(0, gp_axislv) &gt; -.2)
        {
            obj_fighter1.vspeed = 0;
        }
    */
    //End Game on Start Press
    if(gamepad_button_check_pressed(1, gp_start))
    {
        game_end();
    }
    //Restart Game on Select Press
    if(gamepad_button_check_pressed(1, gp_select))
    {
        game_restart();
    }
    //Character Select Controls
    if(room == rm_char_select &amp;&amp; goodToPress)
    {
        if(obj_char_select.player2choice == 0 &amp;&amp; obj_char_select.player1choice != 0)
        {
            //Move Character Choice Down
            if(gamepad_axis_value(1,gp_axislv) &gt; .4)
            {
                if(obj_char_select.selected+3 &lt; 10)
                obj_char_select.selected += 3;
                alarm[1] = 7.5;
                goodToPress =false;
            }
            //Move UP
            if(gamepad_axis_value(1,gp_axislv) &lt; -.4)
            {
                if(obj_char_select.selected-3 &gt; 0)
                obj_char_select.selected -= 3;
                alarm[1] = 7.5;
                goodToPress =false;
            }
            //Move Character Choice Right
            if(gamepad_axis_value(1,gp_axislh)&gt; .4)
            {
                if(obj_char_select.selected &lt; 9  &amp;&amp; obj_char_select.selected % 3 != 0)
                obj_char_select.selected += 1;
                alarm[1] = 7.5;
                goodToPress =false;
            }
            //Move Left
            if(gamepad_axis_value(1,gp_axislh) &lt; -.4)
            {
                if(obj_char_select.selected &gt; 1  &amp;&amp; obj_char_select.selected % 3 != 1)
                obj_char_select.selected -= 1;
                alarm[1] = 7.5;
                goodToPress =false;
            }
            if(gamepad_button_check_pressed(1, gp_face1))
            {
                if(obj_char_select.selected != obj_char_select.player1choice)
                {
                    obj_char_select.player2choice = obj_char_select.selected;
                    room = rm_options;
                }
            }
        }
    }
    //FIGHT CONTROLS
    if(room = rm_fight)
    {
        if(obj_time_bar.between_rounds = false)
        {
        if(onButton == array_length_1d(obj_buttonList1.button_list))
        {
            done = true;
        }
        if(onButton == 0)
        {
            done = false;
        }
        if(onButton &lt; array_length_1d(obj_buttonList1.button_list))
        {
            if(gamepad_button_check_pressed(1, gp_face1) &amp;&amp; goodToPress)
            {    
                //Check if current button is A;
                scr_next_button(obj_buttonList1, 0, obj_player2Controls);
            }
            if(gamepad_button_check_pressed(1, gp_face2) &amp;&amp; goodToPress)
            {
                scr_next_button(obj_buttonList1, 1, obj_player2Controls);
            }
            if(gamepad_button_check_pressed(1, gp_face3) &amp;&amp; goodToPress)
            {
                scr_next_button(obj_buttonList1, 2, obj_player2Controls);
            }
            if(gamepad_button_check_pressed(1, gp_face4) &amp;&amp; goodToPress)
            {
                scr_next_button(obj_buttonList1, 3, obj_player2Controls);
            }
            if(gamepad_button_check_pressed(1, gp_shoulderr) &amp;&amp; goodToPress)
            {
                scr_next_button(obj_buttonList1, 4, obj_player2Controls);
            }
            if(gamepad_button_check_pressed(1, gp_shoulderl) &amp;&amp; goodToPress)
            {
                scr_next_button(obj_buttonList1, 5, obj_player2Controls);
            }
            if(gamepad_button_check_pressed(1, gp_shoulderrb) &amp;&amp; goodToPress)
            {
                scr_next_button(obj_buttonList1, 6, obj_player2Controls);
            }
            if(gamepad_button_check_pressed(1, gp_shoulderlb) &amp;&amp; goodToPress)
            {
                scr_next_button(obj_buttonList1, 7, obj_player2Controls);
            }
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
